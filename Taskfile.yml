version: '3'

tasks:
  # =============================================================================
  # Docker Compose Management
  # =============================================================================
  
  compose:up:
    desc: "Build and run the webapp stack via docker compose"
    cmds:
      - docker compose -f webapp/docker-compose.yml up -d --build
    silent: false 

  compose:down:
    desc: "Stop and remove the webapp stack via docker compose"
    cmds:
      - docker compose -f webapp/docker-compose.yml down -v --remove-orphans
    silent: false

  # =============================================================================
  # Benchmarking & Load Testing
  # =============================================================================

  bench:
    desc: "Run basic benchmarker (no profiling or monitoring)"
    cmds:
      - rm -f *.txt *.html *.pb.gz .pprof_pid
      - task: db:reset
      - task: nginx:reset
      - |
        echo "Running benchmarker..."
        docker run --rm --network host private-isu-benchmarker /bin/benchmarker -t http://host.docker.internal -u /opt/userdata | \
        jq -r '
          "Pass: \(.pass)",
          "Score: \(.score)",
          "Success: \(.success)",
          "Fail: \(.fail)",
          "Messages:",
          (.messages[]? | "- " + .)
        ' | tee benchmark-results.txt
      - task: reports:generate
    silent: false

  bench:monitor:
    desc: "Run benchmarker with project-focused resource monitoring"
    cmds:
      - rm -f *.txt *.html *.pb.gz .pprof_pid
      - task: db:reset
      - task: nginx:reset
      - |
        echo "Starting project resource monitoring..."
        ./scripts/monitor-resources.sh 60 &
        MONITOR_PID=$!
        
        echo "Running benchmarker..."
        docker run --rm --network host private-isu-benchmarker /bin/benchmarker -t http://host.docker.internal -u /opt/userdata | \
        jq -r '
          "Pass: \(.pass)",
          "Score: \(.score)",
          "Success: \(.success)",
          "Fail: \(.fail)",
          "Messages:",
          (.messages[]? | "- " + .)
        ' | tee benchmark-results.txt
        
        echo "Waiting for resource monitoring to complete..."
        wait $MONITOR_PID
        echo "Project resource monitoring completed"
      - task: reports:generate
      - |
        echo "=== All analysis files generated ==="
        ls -la monitoring-reports/*/
        echo "Check monitoring-reports/ directory for detailed resource analysis"
    silent: false

  load-test:
    desc: "Run k6 load test"
    cmds:
      - rm -f *.txt *.html *.json *.pb.gz .pprof_pid
      - task: db:reset
      - task: nginx:reset
      - |
        echo "Running k6 load test..."
        k6 run k6-load-test.js
      - task: reports:generate
    silent: false

  load-test:monitor:
    desc: "Run k6 load test with comprehensive resource monitoring"
    cmds:
      - rm -f *.txt *.html *.json *.pb.gz .pprof_pid
      - task: db:reset
      - task: nginx:reset
      - |
        echo "Starting resource monitoring..."
        ./scripts/monitor-resources.sh 60 &
        MONITOR_PID=$!
        
        echo "Running k6 load test..."
        k6 run k6-load-test.js
        
        echo "Waiting for resource monitoring to complete..."
        wait $MONITOR_PID
        echo "Resource monitoring completed"
      - task: reports:generate
      - |
        echo "=== All analysis files generated ==="
        ls -la monitoring-reports/*/
    silent: false

  load-test:ab:
    desc: "Run a simple load test using Apache Bench (ab) - legacy"
    vars:
      URL: "http://localhost/login"
      REQUESTS: 1000
      CONCURRENCY: 100
    cmds:
      - rm -f *.txt *.html
      - task: db:reset
      - task: nginx:reset
      - |
        echo "Running load test on {{.URL}} with {{.REQUESTS}} requests and {{.CONCURRENCY}} concurrency..."
        ab -n {{.REQUESTS}} -c {{.CONCURRENCY}} {{.URL}}
      - task: reports:generate
    silent: false

  # =============================================================================
  # Database Analysis & Management
  # =============================================================================

  db:reset:
    desc: "Reset and clear MySQL slow query log"
    cmds:
      - docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "SET GLOBAL slow_query_log = 'OFF'; FLUSH SLOW LOGS;"
      - rm -f webapp/logs/mysql/slow.log
      - docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "SET GLOBAL slow_query_log = 'ON';"
      - echo "MySQL slow query log has been reset."

  db:slow:
    desc: "Analyze MySQL slow query log and output to slow-query-report.txt"
    cmds:
      - |
        echo "Analyzing MySQL slow query log..."
        if [ -f webapp/logs/mysql/slow.log ]; then
          pt-query-digest webapp/logs/mysql/slow.log > slow-query-report.txt
          echo "Analysis complete. Report saved to slow-query-report.txt"
        else
          echo "Slow log file not found. Make sure MySQL is running and slow queries are enabled."
        fi

  db:stats:
    desc: "Generate MySQL performance statistics report and output to mysql-stats-report.txt"
    cmds:
      - |
        echo "=== Generating MySQL Performance Statistics Report ==="
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SELECT 
            COUNT_STAR as total_queries,
            SUM_TIMER_WAIT/1000000000000 as total_time_sec,
            AVG_TIMER_WAIT/1000000000000 as avg_time_sec,
            DIGEST_TEXT
          FROM performance_schema.events_statements_summary_by_digest 
          WHERE DIGEST_TEXT IS NOT NULL
          ORDER BY total_time_sec DESC 
          LIMIT 10;
        " > mysql-stats-report.txt
        echo "Analysis complete. Report saved to mysql-stats-report.txt"

  db:top:
    desc: "Analyze recent slow queries and output to slow-query-top-report.txt"
    cmds:
      - |
        echo "=== Analyzing Top 10 Slowest Queries from recent logs ==="
        if [ -f webapp/logs/mysql/slow.log ]; then
          tail -n 1000 webapp/logs/mysql/slow.log | pt-query-digest --limit 10 > slow-query-top-report.txt
          echo "Analysis complete. Report saved to slow-query-top-report.txt"
        else
          echo "Slow log file not found."
        fi

  db:tables:
    desc: "Analyze table sizes and statistics"
    cmds:
      - |
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SELECT 
            table_name,
            table_rows,
            ROUND(data_length/1024/1024, 2) as data_mb,
            ROUND(index_length/1024/1024, 2) as index_mb
          FROM information_schema.tables 
          WHERE table_schema = 'isuconp';
        " > table-stats.txt

  db:processes:
    desc: "Show current MySQL processes and connections"
    cmds:
      - |
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SHOW PROCESSLIST;
          SHOW STATUS LIKE 'Threads_%';
          SHOW STATUS LIKE 'Connection%';
        " > process-status.txt

  db:config:
    desc: "Show important MySQL configuration settings"
    cmds:
      - |
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SHOW VARIABLES LIKE 'innodb_buffer_pool_size';
          SHOW VARIABLES LIKE 'query_cache%';
          SHOW VARIABLES LIKE 'slow_query_log%';
          SHOW VARIABLES LIKE 'long_query_time';
        " > mysql-config.txt

  # =============================================================================
  # Nginx Analysis & Management
  # =============================================================================

  nginx:reset:
    desc: "Reset and clear Nginx access and error logs"
    cmds:
      - rm -f webapp/logs/nginx/*.log
      - docker compose -f webapp/docker-compose.yml exec nginx nginx -s reopen
      - echo "Nginx logs have been reset."

  nginx:alp:
    desc: "Analyze Nginx access log with alp and save report to nginx-alp-report.txt"
    cmds:
      - |
        echo "Analyzing with alp..."
        if [ -f webapp/logs/nginx/access.log ]; then
          alp ltsv --file webapp/logs/nginx/access.log --sort sum -r > nginx-alp-report.txt
          echo "Analysis complete. Report saved to nginx-alp-report.txt"
        else
          echo "Nginx access log not found."
        fi

  nginx:goaccess:
    desc: "Analyze Nginx access log with goaccess and save report to nginx-goaccess-report.html"
    cmds:
      - |
        echo "Analyzing with goaccess..."
        if [ -f webapp/logs/nginx/access.log ]; then
          awk -F'\t' '{ for(i=1;i<=NF;i++){ pos = index($i, ":"); if (pos > 0) { key = substr($i, 1, pos - 1); value = substr($i, pos + 1); data[key] = value } } sub("T", " ", data["time"]); sub("\\+.*", "", data["time"]); print data["host"], data["time"], data["method"], data["uri"], "HTTP/1.1", data["status"], data["size"], data["referer"], data["ua"], data["reqtime"] }' webapp/logs/nginx/access.log | \
          goaccess --log-format='%h %d %t %m %U %H %s %b %R %u %T' --date-format='%Y-%m-%d' --time-format='%H:%M:%S' -o nginx-goaccess-report.html
          echo "Analysis complete. Report saved to nginx-goaccess-report.html"
        else
          echo "Nginx access log not found."
        fi

  # =============================================================================
  # Resource Monitoring
  # =============================================================================

  monitor:resources:
    desc: "Monitor project-specific resources (Docker containers, processes)"
    vars:
      DURATION: "{{.DURATION | default \"60\"}}"
      OUTPUT_DIR: "{{.OUTPUT_DIR | default \"\"}}"
    cmds:
      - |
        if [ -z "{{.OUTPUT_DIR}}" ]; then
          ./scripts/monitor-resources.sh {{.DURATION}}
        else
          ./scripts/monitor-resources.sh {{.DURATION}} {{.OUTPUT_DIR}}
        fi

  # =============================================================================
  # Profiling (pprof)
  # =============================================================================

  pprof:start:
    desc: "Start CPU profiling for 60 seconds in background"
    cmds:
      - |
        echo "Starting CPU profiling for 60 seconds..."
        curl -o cpu-profile-$(date +%Y%m%d-%H%M%S).pb.gz http://localhost:6060/debug/pprof/profile?seconds=60 &
        echo $! > .pprof_pid
        echo "CPU profiling started (PID: $(cat .pprof_pid))"

  pprof:mem:
    desc: "Take memory profile snapshot"
    cmds:
      - |
        echo "Taking memory profile snapshot..."
        curl -o mem-profile-$(date +%Y%m%d-%H%M%S).pb.gz http://localhost:6060/debug/pprof/heap
        echo "Memory profile saved"

  pprof:web:
    desc: "Open pprof web interface for analysis"
    vars:
      PROFILE: "{{.PROFILE}}"
    cmds:
      - |
        if [ -z "{{.PROFILE}}" ]; then
          echo "Usage: task pprof:web PROFILE=<profile-file>"
          echo "Available profiles:"
          ls -la *.pb.gz 2>/dev/null || echo "No profile files found"
          exit 1
        fi
        echo "Opening pprof web interface for {{.PROFILE}}"
        go tool pprof -http=localhost:8081 "{{.PROFILE}}"

  pprof:cleanup:
    desc: "Clean up old profile files"
    cmds:
      - rm -f *.pb.gz .pprof_pid
      - echo "Profile files cleaned up"

  # =============================================================================
  # Report Generation
  # =============================================================================

  reports:generate:
    desc: "Generate all analysis reports (DB, Nginx)"
    cmds:
      - task: db:slow
      - task: db:stats
      - task: nginx:alp
      - |
        echo "=== All reports generated ==="
        echo "Database reports:"
        ls -la *query*report*.txt *stats*.txt 2>/dev/null || echo "No database reports found"
        echo "Nginx reports:"
        ls -la *alp*report*.txt 2>/dev/null || echo "No nginx reports found"

  reports:summary:
    desc: "Show summary of all generated reports"
    cmds:
      - |
        echo "=== Generated Reports Summary ==="
        echo ""
        echo "Database Analysis:"
        if [ -f slow-query-report.txt ]; then
          echo "✓ slow-query-report.txt - $(wc -l < slow-query-report.txt) lines"
        else
          echo "✗ slow-query-report.txt - Not found"
        fi
        if [ -f mysql-stats-report.txt ]; then
          echo "✓ mysql-stats-report.txt - $(wc -l < mysql-stats-report.txt) lines"
        else
          echo "✗ mysql-stats-report.txt - Not found"
        fi
        
        echo ""
        echo "Nginx Analysis:"
        if [ -f nginx-alp-report.txt ]; then
          echo "✓ nginx-alp-report.txt - $(wc -l < nginx-alp-report.txt) lines"
        else
          echo "✗ nginx-alp-report.txt - Not found"
        fi
        
        echo ""
        echo "Resource Monitoring:"
        LATEST_REPORT=$(ls -1t monitoring-reports/*/final-summary.txt 2>/dev/null | head -1)
        if [ -n "$LATEST_REPORT" ]; then
          echo "✓ Latest monitoring report: $LATEST_REPORT"
        else
          echo "✗ No monitoring reports found"
        fi
        
        echo ""
        echo "Benchmark Results:"
        if [ -f benchmark-results.txt ]; then
          echo "✓ benchmark-results.txt - $(cat benchmark-results.txt | grep -E '(Score|Success|Fail)')"
        else
          echo "✗ benchmark-results.txt - Not found"
        fi

  # =============================================================================
  # Cleanup & Maintenance
  # =============================================================================

  clean:
    desc: "Clean up all generated files and logs"
    cmds:
      - rm -f *.txt *.html *.pb.gz .pprof_pid *.log
      - rm -rf monitoring-reports/
      - echo "All generated files cleaned up"

  clean:logs:
    desc: "Clean up application logs only"
    cmds:
      - task: db:reset
      - task: nginx:reset
      - echo "Application logs cleaned up"