version: '3'

tasks:
  compose:up:
    desc: "Build and run the webapp stack via docker compose"
    cmds:
      - docker compose -f webapp/docker-compose.yml up -d --build
    silent: false 

  compose:down:
    desc: "Stop and remove the webapp stack via docker compose"
    cmds:
      - docker compose -f webapp/docker-compose.yml down -v --remove-orphans
    silent: false

  bench:
    desc: "Run the private-isu benchmarker and show a readable summary"
    cmds:
      - |
        docker run --rm --network host private-isu-benchmarker /bin/benchmarker -t http://host.docker.internal -u /opt/userdata | \
        jq -r '
          "Pass: \(.pass)",
          "Score: \(.score)",
          "Success: \(.success)",
          "Fail: \(.fail)",
          "Messages:",
          (.messages[]? | "- " + .)
        '
    silent: false

  load-test:
    desc: "Run a simple load test using Apache Bench (ab)"
    vars:
      URL: "http://localhost/login"
      REQUESTS: 1000
      CONCURRENCY: 100
    cmds:
      - |
        echo "Running load test on {{.URL}} with {{.REQUESTS}} requests and {{.CONCURRENCY}} concurrency..."
        ab -n {{.REQUESTS}} -c {{.CONCURRENCY}} {{.URL}}
    silent: false

  # Database Performance Analysis Commands Usage Guide:
  # db:slow: 全体的なパフォーマンス問題を詳細に分析したい時
  # db:top: 最近のパフォーマンス問題を素早く確認したい時  
  # db:stats: リアルタイムのクエリ統計を数値で確認したい時

  db:slow:
    desc: "Analyze MySQL slow query log and output to slow-query-report.txt"
    cmds:
      - |
        echo "Analyzing MySQL slow query log..."
        if [ -f webapp/logs/mysql/slow.log ]; then
          pt-query-digest webapp/logs/mysql/slow.log > slow-query-report.txt
          echo "Analysis complete. Report saved to slow-query-report.txt"
        else
          echo "Slow log file not found. Make sure MySQL is running and slow queries are enabled."
        fi

  db:stats:
    desc: "Generate MySQL performance statistics report and output to mysql-stats-report.txt"
    cmds:
      - |
        echo "=== Generating MySQL Performance Statistics Report ==="
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SELECT 
            COUNT_STAR as total_queries,
            SUM_TIMER_WAIT/1000000000000 as total_time_sec,
            AVG_TIMER_WAIT/1000000000000 as avg_time_sec,
            DIGEST_TEXT
          FROM performance_schema.events_statements_summary_by_digest 
          WHERE DIGEST_TEXT IS NOT NULL
          ORDER BY total_time_sec DESC 
          LIMIT 10;
        " > mysql-stats-report.txt
        echo "Analysis complete. Report saved to mysql-stats-report.txt"

  db:top:
    desc: "Analyze recent slow queries and output to slow-query-top-report.txt"
    cmds:
      - |
        echo "=== Analyzing Top 10 Slowest Queries from recent logs ==="
        if [ -f webapp/logs/mysql/slow.log ]; then
          tail -n 1000 webapp/logs/mysql/slow.log | pt-query-digest --limit 10 > slow-query-top-report.txt
          echo "Analysis complete. Report saved to slow-query-top-report.txt"
        else
          echo "Slow log file not found."
        fi

  db:summary:
    desc: "Generate comprehensive database performance summary"
    cmds:
      - task: db:stats
      - task: db:slow
      - |
        echo "=== General Log Summary ==="
        if [ -f webapp/logs/mysql/general.log ]; then
          echo "Total queries in general log: $(wc -l < webapp/logs/mysql/general.log)"
        else
          echo "General log file not found."
        fi

  db:reset:
    desc: "Reset and clear MySQL slow query log"
    cmds:
      - docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "SET GLOBAL slow_query_log = 'OFF'; FLUSH SLOW LOGS;"
      - rm -f webapp/logs/mysql/slow.log
      - docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "SET GLOBAL slow_query_log = 'ON';"
      - echo "MySQL slow query log has been reset."

  nginx:reset:
    desc: "Reset and clear Nginx access and error logs"
    cmds:
      - rm -f webapp/logs/nginx/*.log
      - docker compose -f webapp/docker-compose.yml exec nginx nginx -s reopen
      - echo "Nginx logs have been reset."

  nginx:alp:
    desc: "Analyze Nginx access log with alp and save report to nginx-alp-report.txt"
    cmds:
      - |
        echo "Analyzing with alp..."
        if [ -f webapp/logs/nginx/access.log ]; then
          alp ltsv --file webapp/logs/nginx/access.log --sort sum -r > nginx-alp-report.txt
          echo "Analysis complete. Report saved to nginx-alp-report.txt"
        else
          echo "Nginx access log not found."
        fi

  db:tables:
    desc: "Analyze table sizes and statistics"
    cmds:
      - |
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SELECT 
            table_name,
            table_rows,
            ROUND(data_length/1024/1024, 2) as data_mb,
            ROUND(index_length/1024/1024, 2) as index_mb
          FROM information_schema.tables 
          WHERE table_schema = 'isuconp';
        " > table-stats.txt

  db:processes:
    desc: "Show current MySQL processes and connections"
    cmds:
      - |
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SHOW PROCESSLIST;
          SHOW STATUS LIKE 'Threads_%';
          SHOW STATUS LIKE 'Connection%';
        " > process-status.txt

  db:config:
    desc: "Show important MySQL configuration settings"
    cmds:
      - |
        docker compose -f webapp/docker-compose.yml exec mysql mysql -uroot -proot -e "
          SHOW VARIABLES LIKE 'innodb_buffer_pool_size';
          SHOW VARIABLES LIKE 'query_cache%';
          SHOW VARIABLES LIKE 'slow_query_log%';
          SHOW VARIABLES LIKE 'long_query_time';
        " > mysql-config.txt
